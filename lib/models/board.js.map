{"version":3,"sources":["../../src/models/board.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAOa,KAAK,WAAL,KAAK;;;;;;;;;;AASd,aATS,KAAK,GASY;YAAd,OAAO,yDAAG,EAAE;;8BATf,KAAK;;AAUV,YAAI,CAAC,OAAO,GAAG,OAAO,CAAA;AACtB,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;AACxB,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;AACxB,YAAI,CAAC,mBAAmB,EAAE,CAAA;AAC1B,YAAI,CAAC,iBAAiB,EAAE,CAAA;KAC3B;;iBAfQ,KAAK;;4BAiBV,GAAG,EAAE,GAAG,EAAE;AACV,gBAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AACtB,uBAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;aACnC;SACJ;;;6BAEI,IAAI,EAAE;;;AACP,2BA7BC,cAAc,EA6BA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/C,oBAAI,CAAC,IAAI,QAAO,GAAG,EAAE,GAAG,EAAE,MAAK,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAA;aAChD,CAAC,CAAA;SACL;;;8CAEqB;AAClB,gBAAI,CAAC,UAAU,GAAG,eAnCD,iBAAiB,EAmCE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACpE,uBAAO,SAtCV,GAAG,CAsCe,GAAG,EAAE,GAAG,CAAC,CAAA;aAC3B,CAAC,CAAA;SACL;;;4CAEmB;;;AAChB,gBAAI,CAAC,IAAI,CAAC,UAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAK;AACzB,oBAAI,UAAU,GAAG,AAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC,CAAA;AACxC,mBAAG,CAAC,gBAAgB,CAAC,OAAK,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,WA5ChD,SAAS,CA4CiD,GAAG,CAAC,CAAA;AAC3D,mBAAG,CAAC,gBAAgB,CAAC,OAAK,GAAG,CAAC,GAAG,GAAG,UAAU,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,WA7C7D,SAAS,CA6C8D,SAAS,CAAC,CAAA;AAC9E,mBAAG,CAAC,gBAAgB,CAAC,OAAK,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,UAAU,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,WA9CjE,SAAS,CA8CkE,SAAS,CAAC,CAAA;aACrF,CAAC,CAAA;SACL;;;WA1CQ,KAAK","file":"board.js","sourcesContent":["import { Hex } from 'hex'\nimport { Direction } from 'utils/direction'\nimport { colRowIterator, colRowMapIterator } from 'utils/iterators'\n\n/**\n* @Class Board\n*/\nexport class Board {\n\n    /**\n    * @constructs Board\n    * @param {Object} options Options object\n    * @param {Integer} options.rows Number of rows in the board\n    * @param {Integer} options.cols Number of columns in the board\n    * @returns {Board} New Board object\n    */\n    constructor(options = {}) {\n        this.options = options\n        this.cols = options.cols\n        this.rows = options.rows\n        this._constructHexMatrix()\n        this._connectHexMatrix()\n    }\n\n    get(col, row) {\n        if (this._hexMatrix[col]) {\n            return this._hexMatrix[col][row]\n        }\n    }\n\n    each(func) {\n        colRowIterator(this.cols, this.rows, (col, row) => {\n            func.call(this, col, row, this.get(col, row))\n        })\n    }\n\n    _constructHexMatrix() {\n        this._hexMatrix = colRowMapIterator(this.cols, this.rows, (col, row) => {\n            return new Hex(col, row)\n        })\n    }\n\n    _connectHexMatrix() {\n        this.each((row, col, hex) => {\n            let oddColDiff = (col % 2 === 0) ? 1 : 0\n            hex.connectAdajacent(this.get(row + 1, col), Direction.BOT)\n            hex.connectAdajacent(this.get(row + oddColDiff, col + 1), Direction.BOT_RIGHT)\n            hex.connectAdajacent(this.get(row - 1 + oddColDiff, col + 1), Direction.TOP_RIGHT)\n        })\n    }\n}\n"]}