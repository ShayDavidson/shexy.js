{"version":3,"sources":["../../src/curves/designer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAIA,IAAM,mBAAmB,GAAG;AACxB,UAAM,EAAE,EAAE;AACV,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;CACZ;;;;;;AAAA,AAMD,IAAM,SAAS,GAAG,KAAK,CAAA;;AAEvB,IAAM,0BAA0B,GAAG,CAC/B,YAjBK,MAAM,CAiBA,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,EAC5B,YAlBK,MAAM,CAkBA,GAAG,EAAE,CAAC,SAAS,CAAC,EAC3B,YAnBK,MAAM,CAmBA,CAAC,EAAE,CAAC,CAAC,EAChB,YApBK,MAAM,CAoBA,GAAG,EAAE,SAAS,CAAC,EAC1B,YArBK,MAAM,CAqBA,CAAC,GAAG,EAAE,SAAS,CAAC,EAC3B,YAtBK,MAAM,CAsBA,CAAC,CAAC,EAAE,CAAC,CAAC,CACpB,CAAA;;IAEY,QAAQ,WAAR,QAAQ;aAAR,QAAQ;8BAAR,QAAQ;;;iBAAR,QAAQ;;yCAEmB;gBAAd,OAAO,yDAAG,EAAE;;AAC9B,mBAAO,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAA;;AAErD,mBAAO,0BAA0B,CAAC,GAAG,CAAC,UAAC,MAAM,EAAK;AAC9C,uBAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;aAC7F,CAAC,CAAA;SACL;;;2CAEyB,IAAI,EAAE,IAAI,EAAgB;gBAAd,OAAO,yDAAG,EAAE;;AAC9C,mBAAO,GAAG,YAlCT,SAAS,EAkCU;AAChB,qBAAK,EAAE,CAAC;AACR,qBAAK,EAAE,CAAC;AACR,uBAAO,EAAE,CAAC;AACV,mBAAG,EAAE,mBAAmB;aAC3B,EAAE,OAAO,CAAC,CAAA;;AAEX,gBAAI,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAA;AAC5D,gBAAI,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAA;;AAExE,mBAAO,eA7CN,iBAAiB,EA6CO,IAAI,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/C,oBAAI,IAAI,GAAG,cAAc,IAAI,CAAC,GAAI,GAAG,GAAG,GAAG,CAAC,AAAC,CAAA;AAC7C,oBAAI,IAAI,GAAG,cAAc,IAAI,CAAC,GAAI,GAAG,GAAG,CAAC,AAAC,GAAI,CAAC,GAAG,GAAG,CAAC,AAAC,CAAA;AACvD,oBAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,IAAI,GAAG,GAAG,CAAC,CAAA,AAAC,CAAA;AAC1C,oBAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,IAAI,GAAG,GAAG,CAAC,GAAI,AAAC,GAAG,GAAG,CAAC,GAAI,GAAG,CAAC,AAAC,CAAA;AAC9D,oBAAI,OAAO,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,GAAG,QAAQ,CAAA;AAC7C,oBAAI,OAAO,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,GAAG,QAAQ,CAAA;AAC7C,uBAAO,YArDV,MAAM,CAqDe,OAAO,EAAE,OAAO,CAAC,CAAA;aACtC,CAAC,CAAA;SACL;;;WA9BQ,QAAQ","file":"designer.js","sourcesContent":["import { Vector } from 'utils/vector'\nimport { colRowMapIterator } from 'utils/iterators'\nimport { deepMerge } from 'utils/object'\n\nconst DEFAULT_HEX_OPTIONS = {\n    radius: 20,\n    scaleX: 1,\n    scaleY: 1\n}\n\n/**\n* The ratio between half the height of the hex to its radius,\n* which actually equals sqrt(3)/2.\n**/\nconst HEX_RATIO = 0.866\n\nconst NORMALIZED_HEX_COORDINATES = [\n    new Vector(-0.5, -HEX_RATIO),\n    new Vector(0.5, -HEX_RATIO),\n    new Vector(1, 0),\n    new Vector(0.5, HEX_RATIO),\n    new Vector(-0.5, HEX_RATIO),\n    new Vector(-1, 0)\n]\n\nexport class Designer {\n\n    static getHexVertices(options = {}) {\n        options = Object.assign(DEFAULT_HEX_OPTIONS, options)\n\n        return NORMALIZED_HEX_COORDINATES.map((vector) => {\n            return vector.multiplyXY(options.radius * options.scaleX, options.radius * options.scaleY)\n        })\n    }\n\n    static getBoardHexCenters(cols, rows, options = {}) {\n        options = deepMerge({\n            baseX: 0,\n            baseY: 0,\n            padding: 0,\n            hex: DEFAULT_HEX_OPTIONS\n        }, options)\n\n        let xHexMultiplier = options.hex.radius * options.hex.scaleX\n        let yHexMultiplier = options.hex.radius * HEX_RATIO * options.hex.scaleY\n\n        return colRowMapIterator(cols, rows, (col, row) => {\n            let hexX = xHexMultiplier * (1 + (1.5 * col))\n            let hexY = yHexMultiplier * (1 + (col % 2) + (2 * row))\n            let paddingX = options.padding * (col + 1)\n            let paddingY = options.padding * (row + 1 + ((col % 2) * 0.5))\n            let centerX = options.baseX + hexX + paddingX\n            let centerY = options.baseY + hexY + paddingY\n            return new Vector(centerX, centerY)\n        })\n    }\n}\n"]}