{"version":3,"sources":["../../src/utils/iterators.js"],"names":[],"mappings":";;;;;QAsBgB,cAAc,GAAd,cAAc;QAgBd,iBAAiB,GAAjB,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;AAhB1B,SAAS,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;AAChD,SAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;AACjC,aAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;AACjC,mBAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;SACpB;KACJ;CACJ;;;;;;;;;;AAAA,AAUM,SAAS,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE;AACvD,QAAI,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA;AAC5B,kBAAc,CAAC,IAAI,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACrC,cAAM,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA,AAAC,CAAA;AAC9C,cAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;KAC3C,CAAC,CAAA;AACF,WAAO,MAAM,CAAA;CAChB","file":"iterators.js","sourcesContent":["/**\n* @callback rowColHandler\n* @param {Integer} col The current column in the iteration step.\n* @param {Integer} row The current row in the iteration step.\n* @returns {undefined} Handler can return a value, but it'll not be used.\n*/\n\n/**\n* @callback rowColMapFunction\n* @param {Integer} col The current column in the iteration step.\n* @param {Integer} row The current row in the iteration step.\n* @returns {*} Mapped value.\n*/\n\n/**\n* Given a number of columns and rows, this iterator goes over each\n* column-row pair and sends then as arguments to the `handler` argument.\n* @param {Integer} cols Number of columns to iterate over.\n* @param {Integer} rows Number of rows to iterate over.\n* @param {rowColHandler} handler A handler for each step of the iteration.\n* @returns {undefined}\n*/\nexport function colRowIterator(cols, rows, handler) {\n    for (let col = 0; col < cols; col++) {\n        for (let row = 0; row < rows; row++) {\n            handler(col, row)\n        }\n    }\n}\n\n/**\n* Given a number of columns and rows, this iterator goes over each\n* column-row pair and sends then as arguments to the `handler` argument.\n* @param {Integer} cols Number of columns to iterate over.\n* @param {Integer} rows Number of rows to iterate over.\n* @param {rowColMapFunction} mapFunction A map function that returns the mapped value.\n* @returns {Array<Array[]>} The mapping result.\n*/\nexport function colRowMapIterator(cols, rows, mapFunction) {\n    let matrix = new Array(cols)\n    colRowIterator(cols, rows, (col, row) => {\n        matrix[col] || (matrix[col] = new Array(rows))\n        matrix[col][row] = mapFunction(col, row)\n    })\n    return matrix\n}\n"]}